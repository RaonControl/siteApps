program seqStep

option +r;

double speed;
int jog;
int current;
int pwm;
int dir;
int stop;
int reset;
int relMove;
int absMove;
int relPulse;
int absPulse;
int jogCW;
int jogCCW;

assign speed to "STEP:SPD";
assign current to "STEP:CUR";
assign pwm to "STEP:PWM";
assign dir to "STEP:DIR";
assign stop to "STEP:STOP";
assign reset to "STEP:RST";
assign relMove to "STEP:MOVR";
assign absMove to "STEP:MOVA";
assign relPulse to "STEP:REL";
assign absPulse to "STEP:ABS";

assign jogCW to "STEP:JCW";
assign jogCCW to "STEP:JCCW";

monitor speed;
monitor reset;
monitor stop;
monitor relMove;
monitor absMove;

monitor jogCW;
monitor jogCCW;

int pulse;
int count;
int count_sign;

ss ssMain
{
  state init
  {
    when(delay(0.1))
    {
      pulse = 0;
      speed = 0.002;
      pwm = 0;
      current = 0;
      count = 0;
      count_sign = 0;
      relPulse = 0;
      absPulse = 0;

      pvPut(speed);
      pvPut(current);

      printf("Step Motor Sequence Start\n");

    } state Stop
  }

  state High
  {
    when(pulse == count || stop == 1)
    {
      current = current + (count * count_sign);
      pvPut(current);

      relMove = 0;
      pvPut(relMove);
 
      absMove = 0;
      pvPut(absMove);

      count = 0;

    } state Stop

    when(delay(speed))
    {
      pwm = 1;
      pvPut(pwm);

    } state Low
  }
  
  state Low
  {
    when(delay(speed))
    {
      pwm = 0;
      pvPut(pwm);

      count++;

    } state High
  }

  state Stop
  {
    when(relMove == 1)
    {
      pvGet(speed);
      pvGet(relPulse);

      if(relPulse < 0) 
      {
        count_sign = -1;
        dir = 0;
      }
      else
      {
        count_sign = 1;
        dir = 1;
      }

      pulse = count_sign * relPulse;
      pvPut(dir);

    } state High

    when(absMove == 1)
    {
      pvGet(speed);
      pvGet(absPulse);
      
      if(absPulse > current)
      {
        count_sign = 1;
        dir = 1;
      }
      else if(absPulse < current)
      {
        count_sign = -1;
        dir = 0;
      }
      else
      {
        count_sign = 0;
        pulse = count;
      }

      pulse = count_sign * (absPulse - current);
      pvPut(dir);

    } state High


    when(jogCW == 1)
    { 
      pvGet(speed);
      dir = 1;
      count_sign = 1;
      pvPut(dir);
     
    } state JogHigh

    when(jogCCW == 1)
    { 
      pvGet(speed);
      dir = 0;
      count_sign = -1;
      pvPut(dir);

    } state JogLow

    when(reset == 1)
    {
      current = 0;
      pvPut(current);

    } state Stop
  }

  state JogHigh
  {
    when((jogCW | jogCCW) == 0)
    {
      current = current + (count * count_sign);
      pvPut(current);

      count = 0;

    } state Stop

    when(delay(speed))
    {
      pwm = 1;
      pvPut(pwm);

    } state JogLow
  }
  
  state JogLow
  {
    when(delay(speed))
    {
      pwm = 0;
      pvPut(pwm);

      count++;

    } state JogHigh
  }

}
